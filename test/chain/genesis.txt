const output = require('../src/chain/output');
const enc = require('../src/encoding');

test('construct using fromData()', () => {
    
// Header start
    "01000000"                                                                  // 4
    "0000000000000000000000000000000000000000000000000000000000000000"          // 32
    "3ba3edfd7a7b12b27ac72c3e67768f617fc81bc3888a51323a9fb8aa4b1e5e4a"          // 32
    "29ab5f49"                                                                  // 4
    "ffff001d"                                                                  // 4
    "1dac2b7c"                                                                  // 4
// Header end

    "01"                                                                        // 1            Number of transactions

// Transaction start
    "01000000"                                                                  // 4            Transaction version  
    "01"                                                                        // 1            Number of inputs
    // Input start
    "0000000000000000000000000000000000000000000000000000000000000000ffffffff"  // 36 (32+4)    Previous Outpoint
    "4d"                                                                        // 1            Script size 0x4d = 77
    "04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73"
    "ffffffff"                                                                  // 4            sequence
    // Input end

    "01"                                                                        // 1            Number of outputs
    // Output end
    "00f2052a01000000"                                                          // 8            Amount
    "43"                                                                        // 1            Script size 0x43 = 67
    "4104678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5fac"
    // Output end
    "00000000"                                                                  // 4            Sequence
// Transaction end



    // 50 * 100'000'000 = 5'000'000'000 = 0x01 2A 05 F2 00


    const scriptStr =
        '4104f5eeb2b10c944c6b9fbcfff94c35bdeecd93df977882babc7f3a2cf7f5c81d3b09a68db7f0e04f21de5d4230e75e6dbe7ad16eefe0d4325a62067dc6f369446aac';
    const outputStr =
        '4104f5eeb2b10c944c6b9fbcfff94c35bdeecd93df977882babc7f3a2cf7f5c81d3b09a68db7f0e04f21de5d4230e75e6dbe7ad16eefe0d4325a62067dc6f369446aac';
    const outputBytes = enc.hexStrToBytes(outputStr);
    const h = output.fromData(1, outputBytes);
    expect(h.version).toBe(1);
    expect(h.timestamp).toBe(1231006505);
    expect(h.bits).toBe(0x1d00ffff);
    expect(h.nonce).toBe(2083236893);
    expect(enc.bytesToHexStr(h.rawData(1))).toBe(outputStr);
});

// test('construct using main constructor', () => {
//     const previousBlockHash = enc.Hash.strToBytes('0000000000000000000000000000000000000000000000000000000000000000');
//     const merkle = enc.Hash.strToBytes('4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b');
//     const h = new output.Header(1, previousBlockHash, merkle, 1231006505, 0x1d00ffff, 2083236893);

//     expect(enc.Hash.bytesToStr(h.hash)).toBe('000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f');
//     expect(enc.Hash.bytesToStr(h.hash)).toEqual('000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f');
//     expect(h.version).toBe(1);
//     expect(enc.Hash.bytesToStr(h.previousBlockHash)).toEqual(
//         '0000000000000000000000000000000000000000000000000000000000000000'
//     );
//     expect(enc.Hash.bytesToStr(h.merkle)).toEqual('4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b');
//     expect(h.timestamp).toBe(1231006505);
//     expect(h.bits).toBe(0x1d00ffff);
//     expect(h.nonce).toBe(2083236893);
//     expect(enc.bytesToHexStr(h.rawData(1))).toBe(
//         '0100000000000000000000000000000000000000000000000000000000000000000000003ba3edfd7a7b12b27ac72c3e67768f617fc81bc3888a51323a9fb8aa4b1e5e4a29ab5f49ffff001d1dac2b7c00'
//     );
// });
